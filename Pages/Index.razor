@using Microsoft.AspNetCore.SignalR.Client
@using Otomatik.BlazorBin.Data

@page "/"
@page "/{BinCode}"

@inject BinService BinService
@inject NavigationManager NavigationManager

<div>
    <label for="userInput">Bin:</label>
    <input id="userInput" @bind="userInput" />
</div>
<div>
    <label>Public Url:</label>
    <a href="@endpoint">@endpoint</a>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send Message</button>

<hr />

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string BinCode { get; set; }

    HubConnection hubConnection;
    List<string> messages = new List<string>();
    string userInput;
    string endpoint;

    protected override async Task OnInitializedAsync()
    {
        userInput = BinCode ?? await BinService.GenerateCode();
        endpoint = "https://localhost:44317/" + userInput;

        await ConnectHub();

        await hubConnection.SendAsync("AddToGroup", userInput);
    }

    private async Task ConnectHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = user + " says " + message;
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();
        }
    }

    Task Send() => hubConnection.SendAsync("SendMessageToGroup", userInput, "messageInput");

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
}