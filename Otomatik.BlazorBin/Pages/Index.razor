@using Microsoft.AspNetCore.SignalR.Client
@using Otomatik.BlazorBin.Data
@using CurrieTechnologies.Razor.Clipboard
@using Otomatik.BlazorBin.Models

@page "/"
@page "/{BinCode}"

@inject BinService BinService
@inject NavigationManager NavigationManager
@inject ApiService ApiService
@inject ClipboardService Clipboard

<div class="sidebar">
    <NavMenu Requests="@requests" OnClick="@OnNavClick" GroupName="@groupName" />
</div>

<div class="main">
    <div class="top-row px-4">
        <div class="input-group col-md-5">
            <div class="input-group-prepend">
                <div class="input-group-text" id="btnBinUrl">
                    @if (IsConnected)
                    {
                        <span class="oi oi-check text-success" aria-hidden="true" title="Connected"></span>
                    }
                    else
                    {
                        <span class="oi oi-x text-danger" aria-hidden="true" title="Connection failed"></span>
                    }
                    Endpoint
                </div>
            </div>
            <input type="text" class="form-control" readonly="readonly" aria-label="Bin endpoint" aria-describedby="btnBinUrl" value="@endpoint" onfocus="this.select();" onmouseup="return false;">
        </div>
        <button type="button" class="btn btn-primary" title="Copy" aria-label="Copy"
                @onclick="(async e => await Clipboard.WriteTextAsync(endpoint))">
            <span class="oi oi-clipboard" aria-hidden="true"></span>
        </button>
        <a href="https://github.com/olcay/blazorbin" target="_blank" class="btn btn-dark" title="Source code"><img src="image/github.svg" alt="Github" aria-hidden="true" role="img" /></a>
    </div>

    <div class="content px-4">
        @if (selectedMessage != null)
        {
            <BSCard>
                <BSCard CardType="CardType.Header" HeadingSize="HeadingSize.H3">HTTP Request: @selectedMessage.Method <small title="Request time">on @selectedMessage.ReceivedOn</small></BSCard>
                <BSCard CardType="CardType.Body">
                    <BSTable IsHovarable="true" IsSmall="true">
                        <tbody>
                            @foreach (var header in selectedMessage.Headers)
                            {

                                <tr>
                                    <th scope="row">@header.Key</th>
                                    <td>@header.Value</td>
                                </tr>
                            }
                        </tbody>
                    </BSTable>
                    @if (!string.IsNullOrEmpty(selectedMessage.Body))
                    {
                        <BSCard CardType="CardType.Title">Body</BSCard>
                        <BSCard CardType="CardType.Text">@selectedMessage.Body</BSCard>
                    }
                </BSCard>
            </BSCard>
        }
    </div>
    <div class="content px-4">
        <BSTabGroup>
            <BSCard>
                <BSCard CardType="CardType.Header" style="padding: .75rem 0 0 0; border-bottom: 0">
                    <BSTabList style="padding-left: .75rem;">
                        <BSTab>
                            <BSTabLabel>cURL</BSTabLabel>
                            <BSTabContent>
                                curl -d <code>"{ \"sampleText\" : \"Incoming message.\" }"</code> -H "Content-Type: application/json" <code>@endpoint</code>
                            </BSTabContent>
                        </BSTab>
                        <BSTab>
                            <BSTabLabel>.NET</BSTabLabel>
                            <BSTabContent>
                                var json = JsonConvert.SerializeObject(<code>new { sampleText = "Incoming message." }</code>);<br />
                                var data = new StringContent(json, Encoding.UTF8, "application/json");<br /><br />

                                using var client = new HttpClient();<br />
                                var response = await client.PostAsync(<code>"@endpoint"</code>, data);<br />

                                string result = response.Content.ReadAsStringAsync().Result;<br />
                                Console.WriteLine(result);
                            </BSTabContent>
                        </BSTab>
                        <BSTab>
                            <BSTabLabel>JavaScript</BSTabLabel>
                            <BSTabContent>
                                var myHeaders = new Headers();<br />
                                myHeaders.append("Content-Type", "application/json");<br /><br />

                                var raw = JSON.stringify(<code>{"sampleText":"Incoming message."}</code>);<br /><br />

                                var requestOptions = { method: 'POST', headers: myHeaders, body: raw, redirect: 'follow'};<br /><br />

                                fetch(<code>"@endpoint"</code>, requestOptions)<br />
                                .then(response => response.text())<br />
                                .then(result => console.log(result))<br />
                                .catch(error => console.log('error', error));
                            </BSTabContent>
                        </BSTab>
                        <BSTab>
                            <BSTabLabel>Python</BSTabLabel>
                            <BSTabContent>
                                import http.client<br />
                                import mimetypes<br /><br />

                                conn = http.client.HTTPSConnection(<code>"@ApiService.GetAddress()"</code>)<br />
                                payload = <code>"{ \"sampleText\" : \"Incoming message.\" }"</code><br />
                                headers = { 'Content-Type': 'application/json' }<br />
                                conn.request("POST", <code>"/@groupName"</code>, payload, headers)<br />
                                res = conn.getresponse()<br />
                                data = res.read()<br />
                                print(data.decode("utf-8"))
                            </BSTabContent>
                        </BSTab>
                    </BSTabList>
                </BSCard>
                <BSCard CardType="CardType.Body">
                    <BSCard CardType="CardType.Text">
                        Send a request to this endpoint and you will see the details of it immediately here.<br /><br />
                        You may use sample HTTP request codes for your preferred programming language.
                    </BSCard>
                    <BSCard Color="Color.Dark" class="code-card">
                        <BSCard CardType="CardType.Body">
                            <BSTabSelectedContent></BSTabSelectedContent>
                        </BSCard>
                    </BSCard>

                </BSCard>
            </BSCard>
        </BSTabGroup>
    </div>
    <div class="content px-4">
    </div>
</div>


@code {
    [Parameter]
    public string BinCode { get; set; }

    HubConnection hubConnection;
    List<Request> requests = new List<Request>();
    Request selectedMessage;
    string groupName;
    string endpoint;

    protected override async Task OnInitializedAsync()
    {
        if (IsConnected) return;

        if (string.IsNullOrEmpty(BinCode))
        {
            groupName = await BinService.GenerateCode();
            NavigationManager.NavigateTo(groupName);
        }
        groupName = BinCode;
        endpoint = ApiService.GetAddress() + groupName;

        await ConnectHub();
    }

    private async Task ConnectHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(ApiService.GetAddress() + "api", options =>
            {
                options.Headers["x-functions-key"] = ApiService.GetKey();
            })
            .Build();

        hubConnection.On<string, List<KeyValuePair<string, string>>, string>("ReceiveMessage",
            (method, headers, body) =>
            {
                var request = new Request()
                {
                    Id = Guid.NewGuid(),
                    Method = method,
                    Body = body,
                    Headers = headers,
                    ReceivedOn = DateTime.Now
                };

                requests.Insert(0, request);

                const int requestsLimit = 30;

                if (requests.Count > requestsLimit)
                {
                    requests.RemoveAt(requestsLimit);
                }

                StateHasChanged();
            });

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();

            await ApiService.AddToGroup(groupName, hubConnection.ConnectionId);
        }
    }

    private void OnNavClick(Request request)
    {
        selectedMessage = request;
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
}
