@using Microsoft.AspNetCore.SignalR.Client
@using Otomatik.BlazorBin.Data
@using CurrieTechnologies.Razor.Clipboard
@using Otomatik.BlazorBin.Models

@page "/"
@page "/{BinCode}"

@inject BinService BinService
@inject NavigationManager NavigationManager
@inject ApiService ApiService
@inject ClipboardService Clipboard

<div class="sidebar">
    <NavMenu Requests="@requests" OnClick="@OnNavClick" GroupName="@groupName" />
</div>

<div class="main">
    <div class="top-row px-4">
        <div class="input-group col-md-5">
            <div class="input-group-prepend">
                <div class="input-group-text" id="btnBinUrl">
                    @if (IsConnected)
                    {
                        <span class="oi oi-check text-success" aria-hidden="true" title="Connected"></span>
                    }
                    else
                    {
                        <span class="oi oi-x text-danger" aria-hidden="true" title="Connection failed"></span>
                    }
                    Endpoint
                </div>
            </div>
            <input type="text" class="form-control" readonly="readonly" aria-label="Bin endpoint" aria-describedby="btnBinUrl" value="@endpoint" onfocus="this.select();" onmouseup="return false;">
        </div>
        <button type="button" class="btn btn-primary" title="Copy" aria-label="Copy"
                @onclick="(async e => await Clipboard.WriteTextAsync(endpoint))">
            <span class="oi oi-clipboard" aria-hidden="true"></span>
        </button>
        <a href="https://github.com/olcay/blazorbin" target="_blank" class="btn btn-dark" title="Source code"><img src="image/github.svg" alt="Github" aria-hidden="true" role="img" /></a>
    </div>

    <div class="content px-4">
        @if (selectedMessage != null)
        {
            <div class="card">
                <h5 class="card-header">/@selectedMessage.Method</h5>
                <div class="card-body">
                    <table class="table table-hover table-sm">
                        <tbody>
                            @foreach (var header in selectedMessage.Headers)
                            {

                                <tr>
                                    <th scope="row">@header.Key</th>
                                    <td>@header.Value</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    @if (!string.IsNullOrEmpty(selectedMessage.Body))
                    {
                        <h5 class="card-title">Body</h5>
                        <p class="card-text">@selectedMessage.Body</p>
                    }
                    <footer>on <cite title="Request time">@selectedMessage.ReceivedOn</cite></footer>
                </div>
            </div>
        }
    </div>
    <div class="content px-4">
        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" id="curl-tab" data-toggle="tab" href="#curl" role="tab" aria-controls="curl" aria-selected="true">cURL</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="profile-tab" data-toggle="tab" href="#profile" role="tab" aria-controls="profile" aria-selected="false">C#</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" id="contact-tab" data-toggle="tab" href="#contact" role="tab" aria-controls="contact" aria-selected="false">JavaScript</a>
                    </li>
                </ul>
            </div>
            <div class="card-body text-white bg-dark">
                <p class="card-text">> curl -d "{ \"SampleText\" : \"Incoming message.\" }" -H "Content-Type: application/json" @endpoint</p>
            </div>
        </div>
    </div>
    <div class="content px-4">
    </div>
</div>


@code {
    [Parameter]
    public string BinCode { get; set; }

    HubConnection hubConnection;
    List<Request> requests = new List<Request>();
    Request selectedMessage;
    string groupName;
    string endpoint;

    protected override async Task OnInitializedAsync()
    {
        if (IsConnected) return;

        if (string.IsNullOrEmpty(BinCode))
        {
            groupName = await BinService.GenerateCode();
            NavigationManager.NavigateTo(groupName);
        }
        groupName = BinCode;
        endpoint = ApiService.GetAddress() + groupName;

        await ConnectHub();
    }

    private async Task ConnectHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(ApiService.GetAddress() + "api", options =>
            {
                options.Headers["x-functions-key"] = ApiService.GetKey();
            })
            .Build();

        hubConnection.On<string, List<KeyValuePair<string, string>>, string>("ReceiveMessage",
            (method, headers, body) =>
            {
                var request = new Request()
                {
                    Method = method,
                    Body = body,
                    Headers = headers,
                    ReceivedOn = DateTime.Now
                };

                requests.Add(request);
                StateHasChanged();
            });

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();

            await ApiService.AddToGroup(groupName, hubConnection.ConnectionId);
        }
    }

    private void OnNavClick(Request request)
    {
        selectedMessage = request;
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
}
