@using Microsoft.AspNetCore.SignalR.Client
@using Otomatik.BlazorBin.Data

@page "/"
@page "/{BinCode}"

@inject BinService BinService
@inject NavigationManager NavigationManager
@inject ApiService ApiService

<div>
    <label for="groupName">Bin:</label>
    <input id="groupName" @bind="groupName" />
</div>
<div>
    <label>Public Url:</label>
    <a href="@endpoint">@endpoint</a>
</div>
<button disabled="@(!IsConnected)">Connected</button>

<hr />

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    [Parameter]
    public string BinCode { get; set; }

    HubConnection hubConnection;
    List<string> messages = new List<string>();
    string groupName;
    string endpoint;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(BinCode))
        {
            groupName = await BinService.GenerateCode();
            NavigationManager.NavigateTo(groupName);
        }
        groupName = BinCode;
        endpoint = ApiService.GetAddress() + groupName;

        await ConnectHub();
    }

    private async Task ConnectHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(ApiService.GetAddress() + "api", options => {
                options.Headers["x-functions-key"] = ApiService.GetKey();
            })
            .Build();

        hubConnection.On<string, List<KeyValuePair<string, string>>, string>("ReceiveMessage",
            (method, headers, body) =>
        {
            var encodedMsg = method + " " + body;
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();

            await ApiService.AddToGroup(groupName, hubConnection.ConnectionId);
        }
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;
}