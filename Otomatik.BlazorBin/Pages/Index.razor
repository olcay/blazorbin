@using Microsoft.AspNetCore.SignalR.Client
@using Otomatik.BlazorBin.Data
@using CurrieTechnologies.Razor.Clipboard
@using Otomatik.BlazorBin.Models

@page "/"
@page "/{BinCode}"

@inject BinService BinService
@inject NavigationManager NavigationManager
@inject ApiService ApiService
@inject ClipboardService Clipboard

<div class="sidebar">
    <NavMenu Messages="@messages" SelectedMessage="@selectedMessage" />
</div>

<div class="main">
    <div class="top-row px-4">
        <div class="input-group col-md-5">
            <div class="input-group-prepend">
                <div class="input-group-text" id="btnBinUrl">
                    @if (IsConnected)
                    {
                        <span class="oi oi-check text-success" aria-hidden="true" title="Connected"></span>
                    }
                    else
                    {
                        <span class="oi oi-x text-danger" aria-hidden="true" title="Connection failed"></span>
                    }
                    Endpoint
                </div>
            </div>
            <input type="text" class="form-control" readonly="readonly" aria-label="Bin endpoint" aria-describedby="btnBinUrl" value="@endpoint" onfocus="this.select();" onmouseup="return false;">
        </div>
        <button type="button" class="btn btn-primary" title="Copy" aria-label="Copy" 
                @onclick="(async e => await Clipboard.WriteTextAsync(endpoint))">
        <span class="oi oi-clipboard" aria-hidden="true"></span>
        </button>
        <a href="https://github.com/olcay/blazorbin" target="_blank" class="btn btn-dark" title="Source code"><img src="image/github.svg" alt="Github" aria-hidden="true" role="img"/></a>
    </div>

    <div class="content px-4">

        <ul id="messagesList">
            @if (selectedMessage != null)
            {
                <li>Selected message is @selectedMessage.Method with @selectedMessage.Body</li>
            }
        </ul>
    </div>
</div>


@code {
    [Parameter]
    public string BinCode { get; set; }

    HubConnection hubConnection;
    List<Request> messages = new List<Request>();
    Request selectedMessage;
    string groupName;
    string endpoint;

    protected override async Task OnInitializedAsync()
    {
        if (IsConnected) return;

        if (string.IsNullOrEmpty(BinCode))
        {
            groupName = await BinService.GenerateCode();
            NavigationManager.NavigateTo(groupName);
        }
        groupName = BinCode;
        endpoint = ApiService.GetAddress() + groupName;

        await ConnectHub();
    }

    private async Task ConnectHub()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(ApiService.GetAddress() + "api", options =>
            {
                options.Headers["x-functions-key"] = ApiService.GetKey();
            })
            .Build();

        hubConnection.On<string, List<KeyValuePair<string, string>>, string>("ReceiveMessage",
            (method, headers, body) =>
            {
                var request = new Request()
                {
                    Method = method,
                    Body = body,
                    Headers = headers
                };

                messages.Add(request);
                StateHasChanged();
            });

        if (hubConnection.State != HubConnectionState.Connected)
        {
            await hubConnection.StartAsync();

            await ApiService.AddToGroup(groupName, hubConnection.ConnectionId);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;
}